{"ast":null,"code":"var _jsxFileName = \"/home/vaibhav/Public/Web APP/info-track/src/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, DrawingManager } from '@react-google-maps/api';\nimport { Box, Button, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: 37.7749,\n  // San Francisco\n  lng: -122.4194\n};\n\n// Define the libraries outside the component to prevent reloading on every render\nconst libraries = ['drawing']; // This array is now static\n\nconst Map = () => {\n  _s();\n  const [drawingMode, setDrawingMode] = useState(null);\n  const [mapInstance, setMapInstance] = useState(null);\n\n  // Use the useLoadScript hook to ensure the maps are fully loaded\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAJa9THiXu8-cwpw0FKfXNB_hrAL48ayfE\",\n    // Your API Key\n    libraries // Pass the static libraries array\n  });\n\n  // Handle drawing completion\n  const handleDrawingComplete = useCallback(e => {\n    let latLngs = [];\n    if (e.type === 'marker') {\n      latLngs = [e.latLng];\n    } else if (e.type === 'polyline' || e.type === 'polygon') {\n      latLngs = e.getPath().getArray();\n    }\n\n    // Log latitudes and longitudes in the console\n    latLngs.forEach(latLng => {\n      console.log(`Latitude: ${latLng.lat()}, Longitude: ${latLng.lng()}`);\n    });\n  }, []);\n\n  // Return loading message until Google Maps is fully loaded\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Handle the map instance loaded event to store map\n  const handleMapLoad = map => {\n    setMapInstance(map);\n    console.log('Map Loaded', map);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Google Maps Drawing Tools\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 10,\n      onLoad: handleMapLoad,\n      children: mapInstance && /*#__PURE__*/_jsxDEV(DrawingManager, {\n        drawingMode: drawingMode,\n        onOverlayComplete: handleDrawingComplete,\n        options: {\n          drawingControl: true,\n          drawingControlOptions: {\n            position: window.google.maps.ControlPosition.TOP_CENTER,\n            drawingModes: [window.google.maps.drawing.OverlayType.MARKER, window.google.maps.drawing.OverlayType.POLYLINE, window.google.maps.drawing.OverlayType.POLYGON]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => {\n          setDrawingMode(window.google.maps.drawing.OverlayType.MARKER);\n          console.log('Drawing Mode: Marker');\n        },\n        children: \"Draw Marker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: () => {\n          setDrawingMode(window.google.maps.drawing.OverlayType.POLYLINE);\n          console.log('Drawing Mode: Polyline');\n        },\n        sx: {\n          ml: 2\n        },\n        children: \"Draw Polyline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"success\",\n        onClick: () => {\n          setDrawingMode(window.google.maps.drawing.OverlayType.POLYGON);\n          console.log('Drawing Mode: Polygon');\n        },\n        sx: {\n          ml: 2\n        },\n        children: \"Draw Polygon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"OUcG4wzUB/MvJzx6vvySuKI9Wao=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","GoogleMap","useLoadScript","DrawingManager","Box","Button","Typography","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","libraries","Map","_s","drawingMode","setDrawingMode","mapInstance","setMapInstance","isLoaded","googleMapsApiKey","handleDrawingComplete","e","latLngs","type","latLng","getPath","getArray","forEach","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","handleMapLoad","map","sx","variant","gutterBottom","mapContainerStyle","zoom","onLoad","onOverlayComplete","options","drawingControl","drawingControlOptions","position","window","google","maps","ControlPosition","TOP_CENTER","drawingModes","drawing","OverlayType","MARKER","POLYLINE","POLYGON","mt","color","onClick","ml","_c","$RefreshReg$"],"sources":["/home/vaibhav/Public/Web APP/info-track/src/Map.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, DrawingManager } from '@react-google-maps/api';\nimport { Box, Button, Typography } from '@mui/material';\n\nconst containerStyle = {\n  width: '100%',\n  height: '500px',\n};\n\nconst center = {\n  lat: 37.7749, // San Francisco\n  lng: -122.4194,\n};\n\n// Define the libraries outside the component to prevent reloading on every render\nconst libraries = ['drawing']; // This array is now static\n\nconst Map = () => {\n  const [drawingMode, setDrawingMode] = useState(null);\n  const [mapInstance, setMapInstance] = useState(null);\n\n  // Use the useLoadScript hook to ensure the maps are fully loaded\n  const { isLoaded } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAJa9THiXu8-cwpw0FKfXNB_hrAL48ayfE\", // Your API Key\n    libraries, // Pass the static libraries array\n  });\n\n  // Handle drawing completion\n  const handleDrawingComplete = useCallback((e) => {\n    let latLngs = [];\n\n    if (e.type === 'marker') {\n      latLngs = [e.latLng];\n    } else if (e.type === 'polyline' || e.type === 'polygon') {\n      latLngs = e.getPath().getArray();\n    }\n\n    // Log latitudes and longitudes in the console\n    latLngs.forEach((latLng) => {\n      console.log(`Latitude: ${latLng.lat()}, Longitude: ${latLng.lng()}`);\n    });\n  }, []);\n\n  // Return loading message until Google Maps is fully loaded\n  if (!isLoaded) {\n    return <Typography>Loading...</Typography>;\n  }\n\n  // Handle the map instance loaded event to store map\n  const handleMapLoad = (map) => {\n    setMapInstance(map);\n    console.log('Map Loaded', map);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Google Maps Drawing Tools\n      </Typography>\n\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={10}\n        onLoad={handleMapLoad}\n      >\n        {/* DrawingManager will be initialized once the map is ready */}\n        {mapInstance && (\n          <DrawingManager\n            drawingMode={drawingMode}\n            onOverlayComplete={handleDrawingComplete}\n            options={{\n              drawingControl: true,\n              drawingControlOptions: {\n                position: window.google.maps.ControlPosition.TOP_CENTER,\n                drawingModes: [\n                  window.google.maps.drawing.OverlayType.MARKER,\n                  window.google.maps.drawing.OverlayType.POLYLINE,\n                  window.google.maps.drawing.OverlayType.POLYGON,\n                ],\n              },\n            }}\n          />\n        )}\n      </GoogleMap>\n\n      <Box mt={2}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            setDrawingMode(window.google.maps.drawing.OverlayType.MARKER);\n            console.log('Drawing Mode: Marker');\n          }}\n        >\n          Draw Marker\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            setDrawingMode(window.google.maps.drawing.OverlayType.POLYLINE);\n            console.log('Drawing Mode: Polyline');\n          }}\n          sx={{ ml: 2 }}\n        >\n          Draw Polyline\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"success\"\n          onClick={() => {\n            setDrawingMode(window.google.maps.drawing.OverlayType.POLYGON);\n            console.log('Drawing Mode: Polygon');\n          }}\n          sx={{ ml: 2 }}\n        >\n          Draw Polygon\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}