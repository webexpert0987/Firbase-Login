{"ast":null,"code":"var _jsxFileName = \"/home/vaibhav/Public/Web APP/info-track/src/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { GoogleMap, LoadScript, DrawingManager, Polygon } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: 37.7749,\n  // San Francisco lat\n  lng: -122.4194 // San Francisco lng\n};\nconst MapComponent = () => {\n  _s();\n  const [polygons, setPolygons] = useState([]);\n  const [currentPolygon, setCurrentPolygon] = useState(null);\n  const mapRef = useRef(null);\n\n  // Ensure google.maps object is loaded properly\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const onPolygonComplete = polygon => {\n    const path = polygon.getPath().getArray().map(latLng => ({\n      lat: latLng.lat(),\n      lng: latLng.lng()\n    }));\n    setPolygons(prevPolygons => [...prevPolygons, path]);\n    setCurrentPolygon(polygon);\n  };\n  const onPolygonClick = polygon => {\n    setCurrentPolygon(polygon);\n  };\n  const onDeletePolygon = () => {\n    if (currentPolygon) {\n      currentPolygon.setMap(null); // Remove the polygon from the map\n      setPolygons(prevPolygons => prevPolygons.filter(polygon => JSON.stringify(polygon) !== JSON.stringify(currentPolygon.getPath().getArray().map(latLng => ({\n        lat: latLng.lat(),\n        lng: latLng.lng()\n      })))));\n      setCurrentPolygon(null);\n    }\n  };\n  useEffect(() => {\n    if (window.google && window.google.maps) {\n      setIsMapLoaded(true);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"YOUR_API_KEY\" // Replace with your actual API key\n      ,\n      libraries: ['drawing'] // Ensure the drawing library is loaded\n      ,\n      children: isMapLoaded && /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 12,\n        onLoad: map => mapRef.current = map,\n        children: [/*#__PURE__*/_jsxDEV(DrawingManager, {\n          onPolygonComplete: onPolygonComplete,\n          options: {\n            drawingControl: true,\n            // Ensure drawing controls are visible\n            drawingControlOptions: {\n              position: window.google.maps.ControlPosition.TOP_LEFT,\n              // Use TOP_LEFT when google.maps is available\n              drawingModes: ['polygon'] // Only enable polygon mode\n            },\n            polygonOptions: {\n              fillColor: \"#FF0000\",\n              fillOpacity: 0.4,\n              strokeColor: \"#FF0000\",\n              strokeWeight: 2\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), polygons.map((polygonPath, index) => /*#__PURE__*/_jsxDEV(Polygon, {\n          paths: polygonPath,\n          onClick: () => onPolygonClick(polygonPath),\n          options: {\n            fillColor: \"#FF0000\",\n            fillOpacity: 0.4,\n            strokeColor: \"#FF0000\",\n            strokeWeight: 2\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onDeletePolygon,\n        disabled: !currentPolygon,\n        children: \"Delete Polygon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"XXnxSggue7gGzVn19n+JlyVVTHI=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","GoogleMap","LoadScript","DrawingManager","Polygon","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MapComponent","_s","polygons","setPolygons","currentPolygon","setCurrentPolygon","mapRef","isMapLoaded","setIsMapLoaded","onPolygonComplete","polygon","path","getPath","getArray","map","latLng","prevPolygons","onPolygonClick","onDeletePolygon","setMap","filter","JSON","stringify","window","google","maps","children","googleMapsApiKey","libraries","mapContainerStyle","zoom","onLoad","current","options","drawingControl","drawingControlOptions","position","ControlPosition","TOP_LEFT","drawingModes","polygonOptions","fillColor","fillOpacity","strokeColor","strokeWeight","fileName","_jsxFileName","lineNumber","columnNumber","polygonPath","index","paths","onClick","style","paddingTop","disabled","_c","$RefreshReg$"],"sources":["/home/vaibhav/Public/Web APP/info-track/src/Map.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { GoogleMap, LoadScript, DrawingManager, Polygon } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '100%',\n  height: '500px',\n};\n\nconst center = {\n  lat: 37.7749, // San Francisco lat\n  lng: -122.4194, // San Francisco lng\n};\n\nconst MapComponent = () => {\n  const [polygons, setPolygons] = useState([]);\n  const [currentPolygon, setCurrentPolygon] = useState(null);\n  const mapRef = useRef(null);\n\n  // Ensure google.maps object is loaded properly\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n\n  const onPolygonComplete = (polygon) => {\n    const path = polygon.getPath().getArray().map((latLng) => ({\n      lat: latLng.lat(),\n      lng: latLng.lng(),\n    }));\n    setPolygons((prevPolygons) => [...prevPolygons, path]);\n    setCurrentPolygon(polygon);\n  };\n\n  const onPolygonClick = (polygon) => {\n    setCurrentPolygon(polygon);\n  };\n\n  const onDeletePolygon = () => {\n    if (currentPolygon) {\n      currentPolygon.setMap(null); // Remove the polygon from the map\n      setPolygons((prevPolygons) =>\n        prevPolygons.filter(\n          (polygon) =>\n            JSON.stringify(polygon) !==\n            JSON.stringify(currentPolygon.getPath().getArray().map((latLng) => ({ lat: latLng.lat(), lng: latLng.lng() })))\n        )\n      );\n      setCurrentPolygon(null);\n    }\n  };\n\n  useEffect(() => {\n    if (window.google && window.google.maps) {\n      setIsMapLoaded(true);\n    }\n  }, []);\n\n  return (\n    <div>\n      <LoadScript\n        googleMapsApiKey=\"YOUR_API_KEY\"  // Replace with your actual API key\n        libraries={['drawing']}  // Ensure the drawing library is loaded\n      >\n        {isMapLoaded && (\n          <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={center}\n            zoom={12}\n            onLoad={(map) => (mapRef.current = map)}\n          >\n            {/* DrawingManager with polygon drawing */}\n            <DrawingManager\n              onPolygonComplete={onPolygonComplete}\n              options={{\n                drawingControl: true, // Ensure drawing controls are visible\n                drawingControlOptions: {\n                  position: window.google.maps.ControlPosition.TOP_LEFT, // Use TOP_LEFT when google.maps is available\n                  drawingModes: ['polygon'], // Only enable polygon mode\n                },\n                polygonOptions: {\n                  fillColor: \"#FF0000\",\n                  fillOpacity: 0.4,\n                  strokeColor: \"#FF0000\",\n                  strokeWeight: 2,\n                },\n              }}\n            />\n\n            {/* Render Polygons */}\n            {polygons.map((polygonPath, index) => (\n              <Polygon\n                key={index}\n                paths={polygonPath}\n                onClick={() => onPolygonClick(polygonPath)}\n                options={{\n                  fillColor: \"#FF0000\",\n                  fillOpacity: 0.4,\n                  strokeColor: \"#FF0000\",\n                  strokeWeight: 2,\n                }}\n              />\n            ))}\n          </GoogleMap>\n        )}\n      </LoadScript>\n\n      {/* Controls */}\n      <div style={{ paddingTop: '10px' }}>\n        <button onClick={onDeletePolygon} disabled={!currentPolygon}>\n          Delete Polygon\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}