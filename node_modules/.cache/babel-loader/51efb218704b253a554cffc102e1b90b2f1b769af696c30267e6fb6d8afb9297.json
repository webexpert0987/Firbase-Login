{"ast":null,"code":"var _jsxFileName = \"/home/vaibhav/Public/Web APP/Maps-drawing/src/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet core styles\nimport 'leaflet-draw/dist/leaflet.draw.css'; // Leaflet Draw styles\nimport { Control } from 'leaflet-draw'; // Import the Control class from leaflet-draw\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LeafletMap = () => {\n  _s();\n  useEffect(() => {\n    // Initialize the Leaflet map\n    const map = L.map('map').setView([51.505, -0.09], 13); // Set the center and zoom level\n\n    // Add OpenStreetMap tile layer (no API key required)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n\n    // Initialize the Leaflet Draw plugin and add controls\n    const drawControl = new L.Control.Draw({\n      draw: {\n        polygon: true,\n        // Enable polygon drawing\n        polyline: false,\n        // Disable polyline drawing\n        rectangle: false,\n        // Disable rectangle drawing\n        circle: false,\n        // Disable circle drawing\n        marker: false // Disable marker drawing\n      },\n      edit: {\n        featureGroup: new L.FeatureGroup().addTo(map) // Store drawn polygons in this feature group\n      }\n    });\n    map.addControl(drawControl);\n\n    // Event listener for when a polygon is drawn\n    map.on('draw:created', e => {\n      const layer = e.layer;\n      const polygon = layer.toGeoJSON(); // Get the polygon as GeoJSON\n      console.log('Polygon drawn:', polygon); // Output the GeoJSON of the polygon\n      map.addLayer(layer); // Add the drawn polygon to the map\n    });\n    return () => {\n      map.remove(); // Cleanup the map when the component unmounts\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      width: '100%',\n      height: '1000px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n_s(LeafletMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LeafletMap;\nexport default LeafletMap;\nvar _c;\n$RefreshReg$(_c, \"LeafletMap\");","map":{"version":3,"names":["React","useEffect","L","Control","jsxDEV","_jsxDEV","LeafletMap","_s","map","setView","tileLayer","addTo","drawControl","Draw","draw","polygon","polyline","rectangle","circle","marker","edit","featureGroup","FeatureGroup","addControl","on","e","layer","toGeoJSON","console","log","addLayer","remove","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/vaibhav/Public/Web APP/Maps-drawing/src/Map.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet core styles\nimport 'leaflet-draw/dist/leaflet.draw.css'; // Leaflet Draw styles\nimport { Control } from 'leaflet-draw'; // Import the Control class from leaflet-draw\n\nconst LeafletMap = () => {\n  useEffect(() => {\n    // Initialize the Leaflet map\n    const map = L.map('map').setView([51.505, -0.09], 13); // Set the center and zoom level\n\n    // Add OpenStreetMap tile layer (no API key required)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n\n    // Initialize the Leaflet Draw plugin and add controls\n    const drawControl = new L.Control.Draw({\n      draw: {\n        polygon: true, // Enable polygon drawing\n        polyline: false, // Disable polyline drawing\n        rectangle: false, // Disable rectangle drawing\n        circle: false, // Disable circle drawing\n        marker: false, // Disable marker drawing\n      },\n      edit: {\n        featureGroup: new L.FeatureGroup().addTo(map), // Store drawn polygons in this feature group\n      },\n    });\n    map.addControl(drawControl);\n\n    // Event listener for when a polygon is drawn\n    map.on('draw:created', (e) => {\n      const layer = e.layer;\n      const polygon = layer.toGeoJSON(); // Get the polygon as GeoJSON\n      console.log('Polygon drawn:', polygon); // Output the GeoJSON of the polygon\n      map.addLayer(layer); // Add the drawn polygon to the map\n    });\n\n    return () => {\n      map.remove(); // Cleanup the map when the component unmounts\n    };\n  }, []);\n\n  return <div id=\"map\" style={{ width: '100%', height: '1000px' }} />;\n};\n\nexport default LeafletMap;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B,CAAC,CAAC;AACnC,OAAO,oCAAoC,CAAC,CAAC;AAC7C,SAASC,OAAO,QAAQ,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvBN,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,GAAG,GAAGN,CAAC,CAACM,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAEvD;IACAP,CAAC,CAACQ,SAAS,CAAC,oDAAoD,CAAC,CAACC,KAAK,CAACH,GAAG,CAAC;;IAE5E;IACA,MAAMI,WAAW,GAAG,IAAIV,CAAC,CAACC,OAAO,CAACU,IAAI,CAAC;MACrCC,IAAI,EAAE;QACJC,OAAO,EAAE,IAAI;QAAE;QACfC,QAAQ,EAAE,KAAK;QAAE;QACjBC,SAAS,EAAE,KAAK;QAAE;QAClBC,MAAM,EAAE,KAAK;QAAE;QACfC,MAAM,EAAE,KAAK,CAAE;MACjB,CAAC;MACDC,IAAI,EAAE;QACJC,YAAY,EAAE,IAAInB,CAAC,CAACoB,YAAY,CAAC,CAAC,CAACX,KAAK,CAACH,GAAG,CAAC,CAAE;MACjD;IACF,CAAC,CAAC;IACFA,GAAG,CAACe,UAAU,CAACX,WAAW,CAAC;;IAE3B;IACAJ,GAAG,CAACgB,EAAE,CAAC,cAAc,EAAGC,CAAC,IAAK;MAC5B,MAAMC,KAAK,GAAGD,CAAC,CAACC,KAAK;MACrB,MAAMX,OAAO,GAAGW,KAAK,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;MACnCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEd,OAAO,CAAC,CAAC,CAAC;MACxCP,GAAG,CAACsB,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,OAAO,MAAM;MACXlB,GAAG,CAACuB,MAAM,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO1B,OAAA;IAAK2B,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAS;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrE,CAAC;AAAChC,EAAA,CArCID,UAAU;AAAAkC,EAAA,GAAVlC,UAAU;AAuChB,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}