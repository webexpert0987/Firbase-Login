{"ast":null,"code":"var _jsxFileName = \"/home/vaibhav/Public/Web APP/info-track/src/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { GoogleMap, LoadScript, DrawingManager, useLoadScript } from '@react-google-maps/api';\nimport { Box, Button, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: 37.7749,\n  // San Francisco\n  lng: -122.4194\n};\nconst Map = () => {\n  _s();\n  const [drawingMode, setDrawingMode] = useState(null);\n\n  // Using the useLoadScript hook to ensure the maps are fully loaded\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAJa9THiXu8-cwpw0FKfXNB_hrAL48ayfE\",\n    // Your API Key\n    libraries: ['drawing'] // Load the drawing library\n  });\n\n  // Handle drawing completion\n  const handleDrawingComplete = useCallback(e => {\n    let latLngs = [];\n    if (e.type === 'marker') {\n      latLngs = [e.latLng];\n    } else if (e.type === 'polyline' || e.type === 'polygon') {\n      latLngs = e.getPath().getArray();\n    }\n\n    // Log latitudes and longitudes in the console\n    latLngs.forEach(latLng => {\n      console.log(`Latitude: ${latLng.lat()}, Longitude: ${latLng.lng()}`);\n    });\n  }, []);\n\n  // Return loading message until Google Maps is fully loaded\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Google Maps Drawing Tools\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 10,\n      children: /*#__PURE__*/_jsxDEV(DrawingManager, {\n        drawingMode: drawingMode,\n        onOverlayComplete: handleDrawingComplete,\n        options: {\n          drawingControl: true,\n          drawingControlOptions: {\n            position: window.google.maps.ControlPosition.TOP_CENTER,\n            drawingModes: [window.google.maps.drawing.OverlayType.MARKER, window.google.maps.drawing.OverlayType.POLYLINE, window.google.maps.drawing.OverlayType.POLYGON]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => setDrawingMode(window.google.maps.drawing.OverlayType.MARKER),\n        children: \"Draw Marker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: () => setDrawingMode(window.google.maps.drawing.OverlayType.POLYLINE),\n        sx: {\n          ml: 2\n        },\n        children: \"Draw Polyline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"success\",\n        onClick: () => setDrawingMode(window.google.maps.drawing.OverlayType.POLYGON),\n        sx: {\n          ml: 2\n        },\n        children: \"Draw Polygon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"xHtjU8HRUSkKZaL05xJ4oWdvDkI=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useCallback","GoogleMap","LoadScript","DrawingManager","useLoadScript","Box","Button","Typography","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","Map","_s","drawingMode","setDrawingMode","isLoaded","googleMapsApiKey","libraries","handleDrawingComplete","e","latLngs","type","latLng","getPath","getArray","forEach","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","variant","gutterBottom","mapContainerStyle","zoom","onOverlayComplete","options","drawingControl","drawingControlOptions","position","window","google","maps","ControlPosition","TOP_CENTER","drawingModes","drawing","OverlayType","MARKER","POLYLINE","POLYGON","mt","color","onClick","ml","_c","$RefreshReg$"],"sources":["/home/vaibhav/Public/Web APP/info-track/src/Map.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { GoogleMap, LoadScript, DrawingManager, useLoadScript } from '@react-google-maps/api';\nimport { Box, Button, Typography } from '@mui/material';\n\nconst containerStyle = {\n  width: '100%',\n  height: '500px',\n};\n\nconst center = {\n  lat: 37.7749, // San Francisco\n  lng: -122.4194,\n};\n\nconst Map = () => {\n  const [drawingMode, setDrawingMode] = useState(null);\n\n  // Using the useLoadScript hook to ensure the maps are fully loaded\n  const { isLoaded } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAJa9THiXu8-cwpw0FKfXNB_hrAL48ayfE\", // Your API Key\n    libraries: ['drawing'], // Load the drawing library\n  });\n\n  // Handle drawing completion\n  const handleDrawingComplete = useCallback((e) => {\n    let latLngs = [];\n\n    if (e.type === 'marker') {\n      latLngs = [e.latLng];\n    } else if (e.type === 'polyline' || e.type === 'polygon') {\n      latLngs = e.getPath().getArray();\n    }\n\n    // Log latitudes and longitudes in the console\n    latLngs.forEach((latLng) => {\n      console.log(`Latitude: ${latLng.lat()}, Longitude: ${latLng.lng()}`);\n    });\n  }, []);\n\n  // Return loading message until Google Maps is fully loaded\n  if (!isLoaded) {\n    return <Typography>Loading...</Typography>;\n  }\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Google Maps Drawing Tools\n      </Typography>\n\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={10}\n      >\n        <DrawingManager\n          drawingMode={drawingMode}\n          onOverlayComplete={handleDrawingComplete}\n          options={{\n            drawingControl: true,\n            drawingControlOptions: {\n              position: window.google.maps.ControlPosition.TOP_CENTER,\n              drawingModes: [\n                window.google.maps.drawing.OverlayType.MARKER,\n                window.google.maps.drawing.OverlayType.POLYLINE,\n                window.google.maps.drawing.OverlayType.POLYGON,\n              ],\n            },\n          }}\n        />\n      </GoogleMap>\n\n      <Box mt={2}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setDrawingMode(window.google.maps.drawing.OverlayType.MARKER)}\n        >\n          Draw Marker\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => setDrawingMode(window.google.maps.drawing.OverlayType.POLYLINE)}\n          sx={{ ml: 2 }}\n        >\n          Draw Polyline\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"success\"\n          onClick={() => setDrawingMode(window.google.maps.drawing.OverlayType.POLYGON)}\n          sx={{ ml: 2 }}\n        >\n          Draw Polygon\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}